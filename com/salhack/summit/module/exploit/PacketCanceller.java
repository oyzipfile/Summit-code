// 
// Decompiled by Procyon v0.5.36
// 

package com.salhack.summit.module.exploit;

import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketInput;
import com.salhack.summit.events.MinecraftEvent;
import com.salhack.summit.events.network.EventClientPacket;
import com.salhack.summit.events.bus.EventHandler;
import com.salhack.summit.events.player.EventPlayerUpdate;
import com.salhack.summit.events.bus.Listener;
import net.minecraft.network.Packet;
import java.util.ArrayList;
import com.salhack.summit.module.Value;
import com.salhack.summit.module.Module;

public final class PacketCanceller extends Module
{
    public final Value<Boolean> CancelCPacketInput;
    public final Value<Boolean> CancelPosition;
    public final Value<Boolean> CancelPositionRotation;
    public final Value<Boolean> CancelRotation;
    public final Value<Boolean> CancelCPacketPlayerAbilities;
    public final Value<Boolean> CancelCPacketPlayerDigging;
    public final Value<Boolean> CancelCPacketPlayerTryUseItem;
    public final Value<Boolean> CancelCPacketPlayerTryUseItemOnBlock;
    public final Value<Boolean> CancelCPacketEntityAction;
    public final Value<Boolean> CancelCPacketUseEntity;
    public final Value<Boolean> CancelCPacketVehicleMove;
    private int PacketsCanelled;
    private ArrayList<Packet<?>> PacketsToIgnore;
    @EventHandler
    private Listener<EventPlayerUpdate> onPlayerUpdate;
    @EventHandler
    private Listener<EventClientPacket> onClientPacket;
    
    public PacketCanceller() {
        super("PacketCanceller", new String[] { "PacketCanceller" }, "Packet canceller for certian packets", "NONE", 15863387, ModuleType.EXPLOIT);
        this.CancelCPacketInput = new Value<Boolean>("Input", new String[] { "CPacketInput" }, "Cancels this packet", true);
        this.CancelPosition = new Value<Boolean>("Position", new String[] { "Position" }, "Cancels this packet", true);
        this.CancelPositionRotation = new Value<Boolean>("PositionRotation", new String[] { "PositionRotation" }, "Cancels this packet", true);
        this.CancelRotation = new Value<Boolean>("Rotation", new String[] { "Rotation" }, "Cancels this packet", true);
        this.CancelCPacketPlayerAbilities = new Value<Boolean>("PlayerAbilities", new String[] { "CPacketPlayerAbilities" }, "Cancels this packet", true);
        this.CancelCPacketPlayerDigging = new Value<Boolean>("PlayerDigging", new String[] { "CPacketPlayerDigging" }, "Cancels this packet", true);
        this.CancelCPacketPlayerTryUseItem = new Value<Boolean>("PlayerTryUseItem", new String[] { "CPacketPlayerTryUseItem" }, "Cancels this packet", true);
        this.CancelCPacketPlayerTryUseItemOnBlock = new Value<Boolean>("PlayerTryUseItemOnBlock", new String[] { "CPacketPlayerTryUseItemOnBlock" }, "Cancels this packet", true);
        this.CancelCPacketEntityAction = new Value<Boolean>("EntityAction", new String[] { "CPacketEntityAction" }, "Cancels this packet", true);
        this.CancelCPacketUseEntity = new Value<Boolean>("UseEntity", new String[] { "CPacketUseEntity" }, "Cancels this packet", true);
        this.CancelCPacketVehicleMove = new Value<Boolean>("VehicleMove", new String[] { "CPacketVehicleMove" }, "Cancels this packet", true);
        this.PacketsCanelled = 0;
        this.PacketsToIgnore = new ArrayList<Packet<?>>();
        this.onPlayerUpdate = new Listener<EventPlayerUpdate>(event -> this.setMetaData(this.getMetaData()));
        this.onClientPacket = new Listener<EventClientPacket>(event -> {
            if (event.getStage() != MinecraftEvent.Stage.Pre) {
                return;
            }
            else if ((event.getPacket() instanceof CPacketInput && this.CancelCPacketInput.getValue()) || (event.getPacket() instanceof CPacketPlayer.Position && this.CancelPosition.getValue()) || (event.getPacket() instanceof CPacketPlayer.PositionRotation && this.CancelPositionRotation.getValue()) || (event.getPacket() instanceof CPacketPlayer.Rotation && this.CancelRotation.getValue()) || (event.getPacket() instanceof CPacketPlayerAbilities && this.CancelCPacketPlayerAbilities.getValue()) || (event.getPacket() instanceof CPacketPlayerDigging && this.CancelCPacketPlayerDigging.getValue()) || (event.getPacket() instanceof CPacketPlayerTryUseItem && this.CancelCPacketPlayerTryUseItem.getValue()) || (event.getPacket() instanceof CPacketPlayerTryUseItemOnBlock && this.CancelCPacketPlayerTryUseItemOnBlock.getValue()) || (event.getPacket() instanceof CPacketEntityAction && this.CancelCPacketEntityAction.getValue()) || (event.getPacket() instanceof CPacketUseEntity && this.CancelCPacketUseEntity.getValue()) || (event.getPacket() instanceof CPacketVehicleMove && this.CancelCPacketVehicleMove.getValue())) {
                if (this.PacketsToIgnore.contains(event.getPacket())) {
                    this.PacketsToIgnore.remove(event.getPacket());
                    return;
                }
                else {
                    ++this.PacketsCanelled;
                    event.cancel();
                    return;
                }
            }
            else {
                return;
            }
        });
        this.setMetaData(this.getMetaData());
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        this.PacketsCanelled = 0;
    }
    
    @Override
    public void toggleNoSave() {
    }
    
    @Override
    public String getMetaData() {
        return String.valueOf(this.PacketsCanelled);
    }
    
    public void AddIgnorePacket(final Packet<?> p_Packet) {
        this.PacketsToIgnore.add(p_Packet);
    }
}
