// 
// Decompiled by Procyon v0.5.36
// 

package com.salhack.summit.module.exploit;

import java.util.Iterator;
import com.salhack.summit.util.SalVec3d;
import com.salhack.summit.waypoints.Waypoint;
import com.salhack.summit.waypoints.WaypointManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import com.salhack.summit.events.bus.EventHandler;
import com.salhack.summit.events.player.EventPlayerUpdate;
import com.salhack.summit.events.bus.Listener;
import net.minecraft.util.math.Vec3d;
import java.util.HashMap;
import com.salhack.summit.module.Value;
import com.salhack.summit.module.Module;

public class CoordTPExploit extends Module
{
    public final Value<Float> MinDistance;
    private HashMap<String, Vec3d> PlayersFar;
    @EventHandler
    private Listener<EventPlayerUpdate> OnPlayerUpdate;
    
    public CoordTPExploit() {
        super("CoordTPExploit", new String[] { "EPTP" }, "Teleport exploit for ender pearls, /tpa etc", "NONE", 2392795, ModuleType.EXPLOIT);
        this.MinDistance = new Value<Float>("MinDistance", new String[] { "MinDistance" }, "Min distance", 1000.0f, 500.0f, 3000.0f, 100.0f);
        this.PlayersFar = new HashMap<String, Vec3d>();
        final Iterator<EntityPlayer> iterator;
        EntityPlayer l_Player;
        Vec3d l_Coords;
        this.OnPlayerUpdate = new Listener<EventPlayerUpdate>(p_Event -> {
            this.mc.world.playerEntities.iterator();
            while (iterator.hasNext()) {
                l_Player = iterator.next();
                if (l_Player != this.mc.player) {
                    if (l_Player.getName() == this.mc.player.getName()) {
                        continue;
                    }
                    else if (l_Player.getDistance((Entity)this.mc.player) < 100.0f) {
                        if (this.PlayersFar.containsKey(l_Player.getName())) {
                            this.SendMessage(String.format("Removing %s from list, they are now in range at %s dist", l_Player.getName(), l_Player.getDistance((Entity)this.mc.player)));
                            this.PlayersFar.remove(l_Player.getName());
                        }
                        else {
                            continue;
                        }
                    }
                    else if (this.PlayersFar.containsKey(l_Player.getName())) {
                        continue;
                    }
                    else if (l_Player.getDistance((Entity)this.mc.player) >= this.MinDistance.getValue()) {
                        l_Coords = new Vec3d(l_Player.posX, l_Player.posY, l_Player.posZ);
                        this.PlayersFar.put(l_Player.getName(), l_Coords);
                        this.SendMessage(String.format("Player %s just teleported to %s", l_Player.getName(), l_Coords.toString()));
                        WaypointManager.Get().AddWaypoint(Waypoint.Type.CoordTPExploit, "CoordTPExploit: " + l_Player.getName(), new SalVec3d(l_Coords.x, l_Coords.y, l_Coords.z), this.mc.player.dimension);
                    }
                    else {
                        continue;
                    }
                }
            }
        });
    }
}
