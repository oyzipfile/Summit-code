// 
// Decompiled by Procyon v0.5.36
// 

package com.salhack.summit.module.exploit;

import com.salhack.summit.util.MathUtil;
import net.minecraft.entity.player.EntityPlayer;
import com.salhack.summit.main.SummitStatic;
import net.minecraft.network.play.server.SPacketDisconnect;
import net.minecraft.util.math.Vec3d;
import net.minecraft.network.play.server.SPacketMoveVehicle;
import net.minecraft.network.play.server.SPacketSpawnMob;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketSetPassengers;
import com.salhack.summit.events.MinecraftEvent;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketVehicleMove;
import com.salhack.summit.events.entity.EventEntityAdded;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import com.salhack.summit.events.network.EventServerPacket;
import com.salhack.summit.events.bus.EventHandler;
import com.salhack.summit.events.player.EventPlayerUpdate;
import com.salhack.summit.events.bus.Listener;
import net.minecraft.entity.Entity;
import com.salhack.summit.module.Value;
import com.salhack.summit.module.Module;

public final class EntityDesync extends Module
{
    public final Value<Boolean> HClip;
    public final Value<Boolean> Timer;
    public final Value<Boolean> PacketCanceller;
    private Entity Riding;
    @EventHandler
    private Listener<EventPlayerUpdate> OnUpdate;
    @EventHandler
    private Listener<EventServerPacket> onServerPacket;
    @EventHandler
    private Listener<EntityJoinWorldEvent> OnWorldEvent;
    @EventHandler
    private Listener<EventEntityAdded> OnEntityAdded;
    
    public EntityDesync() {
        super("EntityDesync", new String[] { "ED" }, "Clientside dismount from entity", "NONE", 14396196, ModuleType.EXPLOIT);
        this.HClip = new Value<Boolean>("HClip", true);
        this.Timer = new Value<Boolean>("Timer", true);
        this.PacketCanceller = new Value<Boolean>("PacketCanceller", true);
        this.Riding = null;
        this.OnUpdate = new Listener<EventPlayerUpdate>(event -> {
            if (this.Riding == null) {
                return;
            }
            else if (this.mc.player.isRiding()) {
                return;
            }
            else {
                this.mc.player.onGround = true;
                if (this.mc.player.posY <= 3.0) {
                    this.mc.player.setPosition(this.mc.player.posX, 69.0, this.mc.player.posZ);
                    this.mc.player.posY = 69.0;
                }
                this.Riding.setPosition(this.mc.player.posX, this.mc.player.posY, this.mc.player.posZ);
                this.mc.player.connection.sendPacket((Packet)new CPacketVehicleMove(this.Riding));
                return;
            }
        });
        SPacketSetPassengers l_Packet;
        Entity en;
        final int[] array;
        int length;
        int j = 0;
        int i;
        Entity ent;
        SPacketDestroyEntities l_Packet2;
        final int[] array2;
        int length2;
        int k = 0;
        int l_EntityId;
        SPacketSpawnMob packet;
        SPacketMoveVehicle packet2;
        this.onServerPacket = new Listener<EventServerPacket>(event -> {
            if (event.getStage() != MinecraftEvent.Stage.Pre) {
                return;
            }
            else {
                if (event.getPacket() instanceof SPacketSetPassengers) {
                    if (this.Riding != null) {
                        l_Packet = (SPacketSetPassengers)event.getPacket();
                        en = this.mc.world.getEntityByID(l_Packet.getEntityId());
                        if (en == this.Riding) {
                            l_Packet.getPassengerIds();
                            length = array.length;
                            while (j < length) {
                                i = array[j];
                                ent = this.mc.world.getEntityByID(i);
                                if (ent == this.mc.player) {
                                    return;
                                }
                                else {
                                    ++j;
                                }
                            }
                            this.SendMessage("You dismounted. RIP");
                            this.toggle();
                        }
                    }
                }
                else if (event.getPacket() instanceof SPacketDestroyEntities) {
                    l_Packet2 = (SPacketDestroyEntities)event.getPacket();
                    l_Packet2.getEntityIDs();
                    length2 = array2.length;
                    while (k < length2) {
                        l_EntityId = array2[k];
                        if (l_EntityId == this.Riding.getEntityId()) {
                            this.SendMessage("Entity is now null SPacketDestroyEntities");
                            this.toggle();
                        }
                        else {
                            ++k;
                        }
                    }
                }
                else if (event.getPacket() instanceof SPacketSpawnMob) {
                    packet = (SPacketSpawnMob)event.getPacket();
                    if (this.Riding != null && this.Riding.getEntityId() == packet.getEntityID()) {
                        event.cancel();
                        this.SendMessage("It's the don key!");
                    }
                }
                else if (event.getPacket() instanceof SPacketMoveVehicle) {
                    packet2 = (SPacketMoveVehicle)event.getPacket();
                    this.SendMessage("SPacketMoveVehicle: " + new Vec3d(Math.floor(packet2.getX()), Math.floor(packet2.getY()), Math.floor(packet2.getZ())).toString());
                    event.cancel();
                }
                else if (event.getPacket() instanceof SPacketDisconnect) {
                    this.toggle();
                }
                return;
            }
        });
        this.OnWorldEvent = new Listener<EntityJoinWorldEvent>(event -> {
            if (event.getEntity() == this.mc.player) {
                this.SendMessage("Joined world event!");
            }
            return;
        });
        this.OnEntityAdded = new Listener<EventEntityAdded>(event -> {
            if (this.PacketCanceller.getValue() && !SummitStatic.PACKETCANCELLER.isEnabled() && event.GetEntity() instanceof EntityPlayer && event.GetEntity() != this.mc.player) {
                SummitStatic.PACKETCANCELLER.toggle();
            }
        });
    }
    
    @Override
    public void toggleNoSave() {
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        if (this.mc.player == null) {
            this.Riding = null;
            this.toggle();
            return;
        }
        if (!this.mc.player.isRiding()) {
            this.SendMessage("You are not riding an entity.");
            this.Riding = null;
            this.toggle();
            return;
        }
        this.Riding = this.mc.player.getRidingEntity();
        this.mc.player.dismountRidingEntity();
        this.mc.world.removeEntity(this.Riding);
        this.SendMessage("Forced a dismount, with entityid : " + this.Riding.getEntityId());
        if (this.HClip.getValue()) {
            final Vec3d l_Direction = MathUtil.direction(this.mc.player.rotationYaw);
            if (l_Direction != null) {
                final Entity l_Entity = (Entity)(this.mc.player.isRiding() ? this.mc.player.getRidingEntity() : this.mc.player);
                l_Entity.setPosition(this.mc.player.posX + l_Direction.x * 122.0, this.mc.player.posY - 30.0, this.mc.player.posZ + l_Direction.z * 122.0);
                this.SendMessage(String.format("Teleported you %s blocks forward", 122));
            }
        }
        if (this.Timer.getValue() && !SummitStatic.TIMER.isEnabled()) {
            SummitStatic.TIMER.toggle();
        }
    }
    
    @Override
    public void onDisable() {
        super.onDisable();
        if (this.mc.world == null) {
            return;
        }
        this.mc.player.capabilities.isFlying = false;
        if (this.Riding != null) {
            this.Riding.isDead = false;
            if (!this.mc.player.isRiding()) {
                this.mc.world.spawnEntity(this.Riding);
                this.mc.player.startRiding(this.Riding, true);
            }
            this.Riding = null;
            this.SendMessage("Forced a remount.");
        }
        if (this.PacketCanceller.getValue() && SummitStatic.PACKETCANCELLER.isEnabled()) {
            SummitStatic.PACKETCANCELLER.toggle();
        }
        if (this.Timer.getValue() && SummitStatic.TIMER.isEnabled()) {
            SummitStatic.TIMER.toggle();
        }
    }
}
